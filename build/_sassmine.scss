


$global-pass: 0;



$global-fail: 0;



$global-total: 0;



$PRECISION: 3;



$STRINGS: (
  stringMissing: "String missing",
  totalResults: "TEST RESULTS",
  toBeLesserExpectsNumbers: "@mixin toBeLesser expects numbers as params",
  toBeGreaterExpectsNumbers: "@mixin toBeGreater expects numbers as params"
) !global;






@function isNumber($value) {
  @return type_of($value) == number;
}



@function allNumbers($args...) {
  @each $arg in $args {
    @if type_of($arg) != number {
      @return false;
    }
  }
  @return true;
}



@function isNaN($value) {
  @return type_of($value) != number;
}



@function isNull($value) {
  @return $value == null;
}



@function isColor($value) {
  @return type_of($value) == color;
}



@function isGreater($value1, $value2) {
  @return $value1 > $value2;
}



@function isLesser($value1, $value2) {
  @return $value1 < $value2;
}



@function isEqual($value1, $value2) {
  @return $value1 == $value2;
}



@function isCloseTo($value1, $value2, $precision) {
  @return ($value1 >= $value2 - $precision) and ($value1 <= $value2 + $precision);
}



@function isMixin($name) {
  @return mixin-exists(quote($name));
}



@function isFunction($name) {
  @return function-exists(quote($name));
}



@function isVariable($name) {
  @return variable-exists(quote($name));
}



@function isGlobal($name) {
  @return global-variable-exists(quote($name));
}




@function toContain($string, $subString) {
  @return str_index($string, $subString) != null;
}



@mixin toBeNaN($value) {
  @include total;
  
  @if isNaN($value) {
    @include pass;
  } @else {
    @include fail;
  }
}



@mixin toBeColor($value) {
  @include total;
  
  @if isColor($value) {
    @include pass;
  } @else {
    @include fail;
  }
}



@mixin toBeNull($value) {
  @include total;
  
  @if isNull($value) {
    @include pass;
  } @else {
    @include fail;
  }
}



@mixin toNotBeNull($value) {
  @include total;
  
  @if not(isNull($value)) {
    @include pass;
  } @else {
    @include fail;
  }
}



@mixin toEqual($actual, $expected) {
  @include total;
  
  @if isEqual($actual, $expected)  {
    @include pass; 
  } @else {
    @include fail;  
  }
}



@mixin toNotEqual($actual, $expected) {
  @include total;
  
  @if not(isEqual($actual, $expected)) {
    @include pass; 
  } @else {
    @include fail; 
  }
}



@mixin toBeUndefined($name) {
  @include total;
  
  @if isMixin($name) or isFunction($name) {
    @include fail; 
  } @else if isVariable($name) or isGlobal($name) {
    @include fail;
  } @else {
    @include pass;  
  }
}



@mixin toBeDefined($name) {
  @include total;
  
  @if isMixin($name) or isFunction($name) {
    @include pass;
  } @else if isVariable($name) or isGlobal($name) {
    @include pass;
  } @else {
    @include fail;
  }
}



@mixin toBeGreater($value1, $value2) {
  @if allNumbers($value1, $value2) == false {
    @include output(toBeGreaterExpectsNumbers);
  }
  
  @include total;
  
  @if isGreater($value1, $value2) {
    @include pass;
  } @else {
    @include fail;
  }
}



@mixin toBeLesser($value1, $value2) {
  @if allNumbers($value1, $value2) == false {
    @include output(toBeLesserExpectsNumbers);
  }
  
  @include total;
  
  @if isLesser($value1, $value2) {
    @include pass;
  } @else {
    @include fail;
  }
}



@mixin toBeCloseTo($actual, $expected, $precision: $PRECISION) {
  @if allNumbers($actual, $expected) == false {
    @include output(toBeLesserExpectsNumbers);
  }
  
  @include total;
  
  @if isCloseTo($actual, $expected, $precision) {
    @include pass; 
  } @else {
    @include fail; 
  }
}



@mixin toContain($string, $subString) {
  @include total;
  
  @if toContain($string, $subString) {
    @include pass;
  } @else {
    @include fail;
  }
}

// -------- LABEL MIXINS --------

@mixin describe($name) {
  
  @content;
  @include outputDescribeTestResults;
  
}

@mixin it($description) {
  $pass: 0 !global;
  $fail: 0 !global;
  $total: 0 !global;
  
  //@extend beforeEach !optional;
  @include outputItTestResults($description) { @content; }
}



@mixin xit($label) {}



@mixin xdescribe($label) {}

// -------- INCREMENTER MIXINS --------



@mixin incrementPass {
  $pass: $pass + 1 !global;
}



@mixin incrementFail {
  $fail: $fail + 1 !global;
}



@mixin incrementTotal {
  $total: $total + 1 !global;
}



@mixin incrementGlobalTotal {
  $global-total: $global-total + 1 !global;
}



@mixin incrementGlobalPass {
  $global-pass: $global-pass + 1 !global;
}



@mixin incrementGlobalFail {
  $global-fail: $global-fail + 1 !global;
}



@mixin pass {
  @include incrementPass;
  @include incrementGlobalPass;
}



@mixin fail {
  @include incrementFail;
  @include incrementGlobalFail;
}



@mixin total {
  @include incrementTotal;
  @include incrementGlobalTotal;
}

// -------- OUTPUT MIXINS --------



@mixin outputItTestResults($label: null) {
  #{$label} {
    @content;
    pass: $pass;
    fail: $fail;
    total: $total;
  }
}



@mixin outputDescribeTestResults($label: map-get($STRINGS, totalResults)) {
  #{$label} {
    pass: $global-pass;
    fail: $global-fail;
    total: $global-total; 
  }
}



@mixin output($string) {
  @if map-has-key($strings, $string) {
    @error map-get($STRINGS, $string);  
  } @else {
    @error map-get($STRINGS, stringMissing);
  }
}