
/*
  @name $global-pass {int}
  @description total passes for all tests
*/

$global-pass: 0;

/*
  @name $global-fail {int}
  @description total fails for all tests
*/

$global-fail: 0;

/*
  @name $global-total {int}
  @description total test count
*/

$global-total: 0;

/*
  @name $strings {map}
  @description Strings for error output
*/

$strings: (
  stringMissing: "String missing",
  totalResults: "TEST RESULTS",
  toBeLesserExpectsNumbers: "@mixin toBeLesser expects numbers as params",
  toBeGreaterExpectsNumbers: "@mixin toBeGreater expects numbers as params"
) !global;




/*
  @name isNumber
  @param $value {any}
  @description Tests to see if the type is a number
  @return {boolean}
*/

@function isNumber($value) {
  @return type_of($value) == number;
}

/*
  @name allNumbers
  @param $args {any}
  @description Checks if all arguments are numbers 
  @return boolean
*/

@function allNumbers($args...) {
  @each $arg in $args {
    @if type_of($arg) != number {
      @return false;
    }
  }
  @return true;
}

/*
  @name isNaN
  @param $value {any}
  @description Tests to see if the type is not a number
  @return {boolean}
*/

@function isNaN($value) {
  @return type_of($value) != number;
}

/*
  @name isNull
  @param $value {any}
  @description Tests to see if the value is null
  @return {boolean}
*/

@function isNull($value) {
  @return $value == null;
}

/*
  @name isColor
  @param $value {any}
  @description Tests to see if the type is a color
  @return boolean
*/

@function isColor($value) {
  @return type_of($value) == color;
}

/*
  @name isGreater
  @param $value1 {number}
  @param $value2 {number}
  @description Tests to see if value1 is greater than value2 
  @return boolean
*/

@function isGreater($value1, $value2) {
  @return $value1 > $value2;
}

/*
  @name isLesser
  @param $value1 {number}
  @param $value2 {number}
  @description Tests to see if value1 is less than value2 
  @return boolean
*/

@function isLesser($value1, $value2) {
  @return $value1 < $value2;
}

/*
  @name isEqual
  @param $value1 {number}
  @param $value2 {number}
  @description Tests to see if value1 is equal to value2 
  @return boolean
*/

@function isEqual($value1, $value2) {
  @return $value1 == $value2;
}

/*
  @name isMixin
  @param $name {any}
  @description Tests to see if the value is a defined mixin 
  @return boolean
*/

@function isMixin($name) {
  @return mixin-exists(quote($name));
}

/*
  @name isFunction
  @param $name {any}
  @description Tests to see if the value is a defined function 
  @return boolean
*/

@function isFunction($name) {
  @return function-exists(quote($name));
}

/*
  @name isVariable
  @param $name {any}
  @description Tests to see if the value is a defined variable 
  @return boolean
*/

@function isVariable($name) {
  @return variable-exists(quote($name));
}

/*
  @name isGlobal
  @param $name {any}
  @description Tests to see if the value is a defined global variable 
  @return boolean
*/

@function isGlobal($name) {
  @return global-variable-exists(quote($name));
}


/*
  @name toBeNaN
  @param $value {any}
  @description Value should be not a number  
*/

@mixin toBeNaN($value) {
  @include total;
  
  @if isNaN($value) {
    @include pass;
  } @else {
    @include fail;
  }
}

/*
  @name toBeNaN
  @param $value {any}
  @description Value should be a color  
*/

@mixin toBeColor($value) {
  @include total;
  
  @if isColor($value) {
    @include pass;
  } @else {
    @include fail;
  }
}

/*
  @name toBeNaN
  @param $value {any}
  @description Value should be null  
*/

@mixin toBeNull($value) {
  @include total;
  
  @if isNull($value) {
    @include pass;
  } @else {
    @include fail;
  }
}

/*
  @name toBeNaN
  @param $value {any}
  @description Value should not be null  
*/

@mixin toNotBeNull($value) {
  @include total;
  
  @if not(isNull($value)) {
    @include pass;
  } @else {
    @include fail;
  }
}

/*
  @name toEqual
  @param $actual {any}
  @param $expected {any}
  @description Values to equal  
*/

@mixin toEqual($actual, $expected) {
  @include total;
  
  @if isEqual($actual, $expected)  {
    @include pass; 
  } @else {
    @include fail;  
  }
}

/*
  @name toNotEqual
  @param $actual {any}
  @param $expected {any}
  @description Values to not equal  
*/

@mixin toNotEqual($actual, $expected) {
  @include total;
  
  @if not(isEqual($actual, $expected)) {
    @include pass; 
  } @else {
    @include fail; 
  }
}

/*
  @name toNotBeDefined
  @param $name {any}
  @description Value should not be defined  
*/

@mixin toNotBeDefined($name) {
  @include total;
  
  @if isMixin($name) or isFunction($name) {
    @include fail; 
  } @else if isVariable($name) or isGlobal($name) {
    @include fail;
  } @else {
    @include pass;  
  }
}

/*
  @name toBeDefined
  @param $name {any}
  @description Value should be defined  
*/

@mixin toBeDefined($name) {
  @include total;
  
  @if isMixin($name) or isFunction($name) {
    @include pass;
  } @else if isVariable($name) or isGlobal($name) {
    @include pass;
  } @else {
    @include fail;
  }
}

/*
  @name toBeGreater
  @param $value1 {number}
  @param $value2 {number}
  @description $value1 should be greater than $value2  
*/

@mixin toBeGreater($value1, $value2) {
  @if allNumbers($value1, $value2) == false {
    @include output(toBeGreaterExpectsNumbers);
  }
  
  @include total;
  
  @if isGreater($value1, $value2) {
    @include pass;
  } @else {
    @include fail;
  }
}

/*
  @name toBeLesser
  @param $value1 {number}
  @param $value2 {number}
  @description $value1 should be less than $value2  
*/

@mixin toBeLesser($value1, $value2) {
  @if allNumbers($value1, $value2) == false {
    @include output(toBeLesserExpectsNumbers);
  }
  
  @include total;
  
  @if isLesser($value1, $value2) {
    @include pass;
  } @else {
    @include fail;
  }
}

// -------- LABEL MIXINS --------

@mixin describe($name) {
  /*  #{$name}  */
  @content;
  @include outputDescribeTestResults;
  /* end #{$name} */
}

@mixin it($description) {
  $pass: 0 !global;
  $fail: 0 !global;
  $total: 0 !global;
  
  //@extend beforeEach !optional;
  @include outputItTestResults($description) { @content; }
}

/*
  @name xit
  @param $label {string}
  @description Exclude it blocks from tests
*/

@mixin xit($label) {}

/*
  @name xdescribe
  @param $label {string}
  @description Exclude descrbe blocks from tests  
*/

@mixin xdescribe($label) {}

// -------- INCREMENTER MIXINS --------

/*
  @name pass
  @description Grouped actions for totals  
*/

@mixin incrementPass {
  $pass: $pass + 1 !global;
}

/*
  @name pass
  @description Grouped actions for totals  
*/

@mixin incrementFail {
  $fail: $fail + 1 !global;
}

/*
  @name pass
  @description Grouped actions for totals  
*/

@mixin incrementTotal {
  $total: $total + 1 !global;
}

/*
  @name pass
  @description Grouped actions for totals  
*/

@mixin incrementGlobalTotal {
  $global-total: $global-total + 1 !global;
}

/*
  @name incrementGlobalPass
  @description Grouped actions for totals  
*/

@mixin incrementGlobalPass {
  $global-pass: $global-pass + 1 !global;
}

/*
  @name incrementGlobalFail
  @description Grouped actions for totals  
*/

@mixin incrementGlobalFail {
  $global-fail: $global-fail + 1 !global;
}

/*
  @name pass
  @description Grouped actions for passes  
*/

@mixin pass {
  @include incrementPass;
  @include incrementGlobalPass;
}

/*
  @name pass
  @description Grouped actions for fails  
*/

@mixin fail {
  @include incrementFail;
  @include incrementGlobalFail;
}

/*
  @name pass
  @description Grouped actions for totals  
*/

@mixin total {
  @include incrementTotal;
  @include incrementGlobalTotal;
}

// -------- OUTPUT MIXINS --------

/*
  @name outputItTestResults
  @param $label {string}
  @description Output it block results
*/

@mixin outputItTestResults($label: null) {
  #{$label} {
    @content;
    pass: $pass;
    fail: $fail;
    total: $total;
  }
}

/*
  @name outputDescribeTestResults
  @param $label {string}
  @description Output describe block results
*/

@mixin outputDescribeTestResults($label: map-get($strings, totalResults)) {
  #{$label} {
    pass: $global-pass;
    fail: $global-fail;
    total: $global-total; 
  }
}

/*
  @name ouput
  @param $string {string}
  @description Gets string from string map to output to the console
*/

@mixin output($string) {
  @if map-has-key($strings, $string) {
    @error map-get($strings, $string);  
  } @else {
    @error map-get($strings, stringMissing);
  }
}